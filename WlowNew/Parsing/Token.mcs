using System.Text.RegularExpressions;

namespace Wlow.Parsing;

~define('toks:0)
~define('regex:(?))
~define('add(rgx, name):
    ~ifeq('regex:(?))
    ~defeval('regex:('rgx))
    ~else
    ~defeval('regex:'regex|('rgx))
    ~endif

    ~ifeq('toks:0)
    ~defeval('toks:'name)
    ~else
    ~defeval('toks:'toks,'name)
    ~endif
)
~define('wrd(rgx, name):'add(\b'c('rgx)\b, 'name))
~define('fin:
    public enum TokenType
    {
        NaT,
        'toks
    }

    public static class TokensRegex
    {
        public readonly static Regex Instance = new Regex(@"'regex", RegexOptions.Multiline);
    }
)

'add(--:, Comment)
'add(:--, CommentEnd)
'add([\t\x20]+|--[^\n]*, Ignore)
'add(~(\()~, Bracket)
'add(~(\))~, BracketEnd)
'add(\{, Figure)
'add(\}, FigureEnd)
'add(!=, NotEquals)
'add(==, Equals)
'add(', Call)
'add(;;, ContinueDelimiter)
'add(;, Delimiter)
'add(~(,)~, Comma)
'add(\+=, SetAdd)
'add(-=, SetSub)
'add(\*=, SetMul)
'add(\/=, SetDiv)
'add(%=, SetMod)
'add(\~=, SetXor)
'add(>>>=, SetRor)
'add(<<<=, SetRol)
'add(>>=, SetShr)
'add(<<=, SetShl)
'add(\|=, SetBitwiseOr)
'add(&=, SetBitwiseAnd)
'add(->, Cast)
'add(->>, BitCast)
'add(>>>, Ror)
'add(<<<, Rol)
'add(>>, Shr)
'add(<<, Shl)
'add(<=, LowerEquals)
'add(>=, GreaterEquals)
'add(<, Lower)
'add(>, Greater)
'add(=, Set)
'add(\^, Ptr)
'add(\d+i8, ValI8)
'add(\d+i16, ValI16)
'add(\d+i32, ValI32)
'add(\d+i64, ValI64)
'add(\d+i128, ValI128)
'add(\d+u8, ValU8)
'add(\d+u16, ValU16)
'add(\d+u32, ValU32)
'add(\d+u64, ValU64)
'add(\d+u128, ValU128)
'add(.?\d+f8|\d+.\d*f8, ValF8)
'add(.?\d+f16|\d+.\d*f16, ValF16)
'add(.?\d+f32|\d+.\d*f32, ValF32)
'add(.?\d+f64|\d+.\d*f64, ValF64)
'add(.?\d+f128|\d+.\d*f128, ValF128)
'add(\.\d+, LDNum)
'add(\d+, Num)
'add(\d+.\d*, FNum)
'add(\., Dot)
'add(!, Not)
'add(\*, Mul)
'add(/, Div)
'add(\+, Add)
'add(-, Sub)
'add(%, Mod)
'add(~, Xor)
'add(\|\|, LogicalOr)
'add(\&\&, LogicalAnd)
'add(\|, BitwiseOr)
'add(\&, BitwiseAnd)
'add(\?, PlaceHolder)
'wrd(i8, Int8)
'wrd(i16, Int16)
'wrd(i32, Int32)
'wrd(i64, Int64)
'wrd(i128, Int128)
'wrd(u8, UInt8)
'wrd(u16, UInt16)
'wrd(u32, UInt32)
'wrd(u64, UInt64)
'wrd(u128, UInt128)
'wrd(f8, Float8)
'wrd(f16, Float16)
'wrd(f32, Float32)
'wrd(f64, Float64)
'wrd(f128, Float128)
'wrd(fail, Fail)
'wrd(let, Let)
'wrd(mut, Mut)
'wrd(type, Type)
'wrd(fn, Function)
'wrd(in, In)
'wrd(if, If)
'wrd(elif, Elif)
'wrd(else, Else)
'wrd(packed, Packed)
'wrd(\b[\p{L}_][\p{L}\p{Nd}_]*\b, Ident)
'wrd(\r?\n, Newline)
'wrd(., Error)

'fin
