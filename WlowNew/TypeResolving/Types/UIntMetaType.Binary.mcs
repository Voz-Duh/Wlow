
using Wlow.Shared;

namespace Wlow.TypeResolving;

public readonly partial struct UIntMetaType
{
  ~include(tryer.mcs.api)
  'op(LogicalOr)
  'op(LogicalAnd)

  ~include(errorer.mcs.api)
  'op(one, Ref)
  'op(one, Deref)
  'op(one, Negate)
  'op(one, Not)
  'op(one, On)
  
  ~define('op(name):
    ~define('bool:(a, b) => BoolMetaType.Get)
    public IMetaType Operation'name(Scope ctx, Info info, IMetaType right)
      => IMetaType.Operate(ctx, info, this, right)
        .Start()
        .On<IntMetaType>('bool)
        .On<UIntMetaType>('bool)
        .Done(IMetaType.OpName.'name);
  )

  'op(Equals)
  'op(NotEquals)
  'op(Lower)
  'op(LowerEquals)
  'op(Greater)
  'op(GreaterEquals)

  ~define('greater:(a, b) => a.Bits < b.Bits ? b : a)
  ~define('inter:(a, b) => a.Bits < b.Bits ? b : a)
  ~define('op(name):
    public IMetaType Operation'name(Scope ctx, Info info, IMetaType right)
      => IMetaType.Operate(ctx, info, this, right)
        .Start()
        .On<IntMetaType>('inter)
        .On<UIntMetaType>('greater)
        .Done(IMetaType.OpName.'name);
  )
  
  'op(Xor)
  'op(Sub)
  'op(Add)
  'op(Mul)
  'op(Div)
  'op(Mod)
  'op(Shr)
  'op(Shl)
  'op(Ror)
  'op(Rol)
  'op(BitwiseOr)
  'op(BitwiseAnd)
}
